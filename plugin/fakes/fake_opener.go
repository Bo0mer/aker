// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.infra.hana.ondemand.com/I061150/aker/plugin"
)

type FakeOpener struct {
	OpenStub        func(string, []byte, *plugin.Plugin) (*plugin.Plugin, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		arg1 string
		arg2 []byte
		arg3 *plugin.Plugin
	}
	openReturns struct {
		result1 *plugin.Plugin
		result2 error
	}
}

func (fake *FakeOpener) Open(arg1 string, arg2 []byte, arg3 *plugin.Plugin) (*plugin.Plugin, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		arg1 string
		arg2 []byte
		arg3 *plugin.Plugin
	}{arg1, arg2, arg3})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(arg1, arg2, arg3)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeOpener) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeOpener) OpenArgsForCall(i int) (string, []byte, *plugin.Plugin) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].arg1, fake.openArgsForCall[i].arg2, fake.openArgsForCall[i].arg3
}

func (fake *FakeOpener) OpenReturns(result1 *plugin.Plugin, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *plugin.Plugin
		result2 error
	}{result1, result2}
}

var _ plugin.Opener = new(FakeOpener)
