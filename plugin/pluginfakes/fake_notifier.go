// This file was generated by counterfeiter
package pluginfakes

import (
	"os"
	"sync"

	"github.infra.hana.ondemand.com/I061150/aker/plugin"
)

type FakeNotifier struct {
	NotifyStub        func(c chan<- os.Signal, sig ...os.Signal)
	notifyMutex       sync.RWMutex
	notifyArgsForCall []struct {
		c   chan<- os.Signal
		sig []os.Signal
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotifier) Notify(c chan<- os.Signal, sig ...os.Signal) {
	fake.notifyMutex.Lock()
	fake.notifyArgsForCall = append(fake.notifyArgsForCall, struct {
		c   chan<- os.Signal
		sig []os.Signal
	}{c, sig})
	fake.recordInvocation("Notify", []interface{}{c, sig})
	fake.notifyMutex.Unlock()
	if fake.NotifyStub != nil {
		fake.NotifyStub(c, sig...)
	}
}

func (fake *FakeNotifier) NotifyCallCount() int {
	fake.notifyMutex.RLock()
	defer fake.notifyMutex.RUnlock()
	return len(fake.notifyArgsForCall)
}

func (fake *FakeNotifier) NotifyArgsForCall(i int) (chan<- os.Signal, []os.Signal) {
	fake.notifyMutex.RLock()
	defer fake.notifyMutex.RUnlock()
	return fake.notifyArgsForCall[i].c, fake.notifyArgsForCall[i].sig
}

func (fake *FakeNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.notifyMutex.RLock()
	defer fake.notifyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Notifier = new(FakeNotifier)
