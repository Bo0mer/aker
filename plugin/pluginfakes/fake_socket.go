// This file was generated by counterfeiter
package pluginfakes

import (
	"net/http"
	"sync"

	"github.infra.hana.ondemand.com/I061150/aker/plugin"
)

type FakeSocket struct {
	ProxyHTTPStub        func(socketPath string) http.Handler
	proxyHTTPMutex       sync.RWMutex
	proxyHTTPArgsForCall []struct {
		socketPath string
	}
	proxyHTTPReturns struct {
		result1 http.Handler
	}
	NewHTTPServerStub        func(path string, h http.Handler) plugin.HTTPServer
	newHTTPServerMutex       sync.RWMutex
	newHTTPServerArgsForCall []struct {
		path string
		h    http.Handler
	}
	newHTTPServerReturns struct {
		result1 plugin.HTTPServer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSocket) ProxyHTTP(socketPath string) http.Handler {
	fake.proxyHTTPMutex.Lock()
	fake.proxyHTTPArgsForCall = append(fake.proxyHTTPArgsForCall, struct {
		socketPath string
	}{socketPath})
	fake.recordInvocation("ProxyHTTP", []interface{}{socketPath})
	fake.proxyHTTPMutex.Unlock()
	if fake.ProxyHTTPStub != nil {
		return fake.ProxyHTTPStub(socketPath)
	} else {
		return fake.proxyHTTPReturns.result1
	}
}

func (fake *FakeSocket) ProxyHTTPCallCount() int {
	fake.proxyHTTPMutex.RLock()
	defer fake.proxyHTTPMutex.RUnlock()
	return len(fake.proxyHTTPArgsForCall)
}

func (fake *FakeSocket) ProxyHTTPArgsForCall(i int) string {
	fake.proxyHTTPMutex.RLock()
	defer fake.proxyHTTPMutex.RUnlock()
	return fake.proxyHTTPArgsForCall[i].socketPath
}

func (fake *FakeSocket) ProxyHTTPReturns(result1 http.Handler) {
	fake.ProxyHTTPStub = nil
	fake.proxyHTTPReturns = struct {
		result1 http.Handler
	}{result1}
}

func (fake *FakeSocket) NewHTTPServer(path string, h http.Handler) plugin.HTTPServer {
	fake.newHTTPServerMutex.Lock()
	fake.newHTTPServerArgsForCall = append(fake.newHTTPServerArgsForCall, struct {
		path string
		h    http.Handler
	}{path, h})
	fake.recordInvocation("NewHTTPServer", []interface{}{path, h})
	fake.newHTTPServerMutex.Unlock()
	if fake.NewHTTPServerStub != nil {
		return fake.NewHTTPServerStub(path, h)
	} else {
		return fake.newHTTPServerReturns.result1
	}
}

func (fake *FakeSocket) NewHTTPServerCallCount() int {
	fake.newHTTPServerMutex.RLock()
	defer fake.newHTTPServerMutex.RUnlock()
	return len(fake.newHTTPServerArgsForCall)
}

func (fake *FakeSocket) NewHTTPServerArgsForCall(i int) (string, http.Handler) {
	fake.newHTTPServerMutex.RLock()
	defer fake.newHTTPServerMutex.RUnlock()
	return fake.newHTTPServerArgsForCall[i].path, fake.newHTTPServerArgsForCall[i].h
}

func (fake *FakeSocket) NewHTTPServerReturns(result1 plugin.HTTPServer) {
	fake.NewHTTPServerStub = nil
	fake.newHTTPServerReturns = struct {
		result1 plugin.HTTPServer
	}{result1}
}

func (fake *FakeSocket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.proxyHTTPMutex.RLock()
	defer fake.proxyHTTPMutex.RUnlock()
	fake.newHTTPServerMutex.RLock()
	defer fake.newHTTPServerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSocket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Socket = new(FakeSocket)
