// This file was generated by counterfeiter
package pluginfakes

import (
	"sync"

	"github.infra.hana.ondemand.com/I061150/aker/plugin"
)

type FakeOpener struct {
	OpenStub        func(name string, config []byte, next *plugin.Plugin) (*plugin.Plugin, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		name   string
		config []byte
		next   *plugin.Plugin
	}
	openReturns struct {
		result1 *plugin.Plugin
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOpener) Open(name string, config []byte, next *plugin.Plugin) (*plugin.Plugin, error) {
	var configCopy []byte
	if config != nil {
		configCopy = make([]byte, len(config))
		copy(configCopy, config)
	}
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		name   string
		config []byte
		next   *plugin.Plugin
	}{name, configCopy, next})
	fake.recordInvocation("Open", []interface{}{name, configCopy, next})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(name, config, next)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeOpener) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeOpener) OpenArgsForCall(i int) (string, []byte, *plugin.Plugin) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].name, fake.openArgsForCall[i].config, fake.openArgsForCall[i].next
}

func (fake *FakeOpener) OpenReturns(result1 *plugin.Plugin, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *plugin.Plugin
		result2 error
	}{result1, result2}
}

func (fake *FakeOpener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOpener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Opener = new(FakeOpener)
